/* Generated by wbuild from "SSGML.w"
** (generator version $Revision$ of $Date$)
*/
#ifndef _XfwfSimpleSGMLP_H_
#define _XfwfSimpleSGMLP_H_
#include <Xfwf/FTextP.h>
#include <Xfwf/SSGML.h>
_XFUNCPROTOBEGIN
#define NAMELEN 72 


#define LITLEN 1024 


#define TAGLVL 100 


#define SYSTEM_DATA 0 


#define ISO8859_1 1 


#define GENERAL_ENTITY -1 


#define WWW_ICONS -2 


#define SYMBOLS -3 


typedef struct _Attrib {
	    struct _Attrib *next;
	    char name[NAMELEN+1];
	    char value[LITLEN+1];
	}* Attrib;
typedef enum {
	    StyleNo,				/* Not a stylesheet */
	    StyleMerge,				/* Add to stylesheet */
	    StyleReplace,			/* Completely replace */
	    StyleOverride			/* Add and override */
	} StyType;
typedef struct _FormatInfo {
	    struct _FormatInfo *next;
	    XrmQuark tag;			/* Current element */
	    Bool verbatim;			/* Every space/nl counts? */
	    Bool nowrap;			/* Lines not broken? */
	    TextStyle textstyle;		/* Font selection */
	    Pixel fg, bg;			/* Colors */
	    Bool hide;				/* Don't display? */
	    Bool title;				/* Put contents in title? */
	    StyType stylesheettype;		/* Put cont. in stylesheet? */
	    String stylesheet;			/* Stylesheet, if any */
	    int data;				/* Ptr to extra info (URL) */
	    Bool ismap;				/* Pass (x,y) after URL? */
	    int inlinevmargin, inlinehmargin;	/* Extra pxls around inline */
	    int children;			/* # of children */
	    Bool break_after;			/* Vertical skip after elt? */
	    /* float postbreak;			/* how many lines to skip */
	    int postbreak;			/* Pixels to skip */
	    int parmode;			/* Float or normal par */
	    int leftmargin, rightmargin;	/* Indents */
	    int width;				/* Width, or -1 */
	    Bool hrule_after;			/* Add rule below element? */
	    /* float hrulebreak;		/* Between text and hrule */
	    int hrulebreak;			/* Pixels betw. text & rule */
	    float leading;			/* 1.0 is normal line height */
	    int flush;				/* Flush floating images */
	    char insafter[LITLEN+1];		/* Text to insert after elt. */
	    int parindent;			/* Indent first line of par */
	    Bool suppress_indent;		/* No indent for *next* elt. */
	    Bool save_content;			/* Store content in buffer */
	}* FormatInfo;
typedef enum {
	    T_WORD, T_BLANK, T_NL, T_ENTITY, T_STARTTAG,
	    T_ENDTAG, T_NONE, T_EOD
	} Token;
typedef void (*pop_style_Proc)(
#if NeedFunctionPrototypes
Widget
#endif
);
#define XtInherit_pop_style ((pop_style_Proc) _XtInherit)
typedef void (*make_child_from_source_Proc)(
#if NeedFunctionPrototypes
Widget,Widget ,const  String 
#endif
);
#define XtInherit_make_child_from_source ((make_child_from_source_Proc) _XtInherit)
typedef Bool  (*scan_num_Proc)(
#if NeedFunctionPrototypes
char *,char *,int *
#endif
);
#define XtInherit_scan_num ((scan_num_Proc) _XtInherit)
typedef void (*push_style_Proc)(
#if NeedFunctionPrototypes
Widget,XrmQuark ,Attrib 
#endif
);
#define XtInherit_push_style ((push_style_Proc) _XtInherit)
typedef Bool  (*get_entity_Proc)(
#if NeedFunctionPrototypes
Widget,const  String ,Cardinal ,char  val[],Cardinal ,int *
#endif
);
#define XtInherit_get_entity ((get_entity_Proc) _XtInherit)
typedef void (*process_entity_Proc)(
#if NeedFunctionPrototypes
Widget,const  String ,Cardinal 
#endif
);
#define XtInherit_process_entity ((process_entity_Proc) _XtInherit)
typedef void (*add_endtag_Proc)(
#if NeedFunctionPrototypes
Widget,const  String ,Cardinal 
#endif
);
#define XtInherit_add_endtag ((add_endtag_Proc) _XtInherit)
typedef void (*add_starttag_Proc)(
#if NeedFunctionPrototypes
Widget,const  String ,Cardinal ,Attrib 
#endif
);
#define XtInherit_add_starttag ((add_starttag_Proc) _XtInherit)
typedef void (*add_text_Proc)(
#if NeedFunctionPrototypes
Widget,const  char *,Cardinal 
#endif
);
#define XtInherit_add_text ((add_text_Proc) _XtInherit)
typedef Bool  (*get_attrib_Proc)(
#if NeedFunctionPrototypes
Widget,Attrib ,const  String ,char  value[],Cardinal 
#endif
);
#define XtInherit_get_attrib ((get_attrib_Proc) _XtInherit)
typedef struct {
/* Constraint resources */
/* Private constraint variables */
int dummy;
} XfwfSimpleSGMLConstraintPart;

typedef struct _XfwfSimpleSGMLConstraintRec {
XmManagerConstraintPart xmManager;
XfwfFormattedTextConstraintPart xfwfFormattedText;
XfwfSimpleSGMLConstraintPart xfwfSimpleSGML;
} XfwfSimpleSGMLConstraintRec;


typedef struct {
/* methods */
pop_style_Proc pop_style;
make_child_from_source_Proc make_child_from_source;
scan_num_Proc scan_num;
push_style_Proc push_style;
get_entity_Proc get_entity;
process_entity_Proc process_entity;
add_endtag_Proc add_endtag;
add_starttag_Proc add_starttag;
add_text_Proc add_text;
get_attrib_Proc get_attrib;
/* class variables */
} XfwfSimpleSGMLClassPart;

typedef struct _XfwfSimpleSGMLClassRec {
CoreClassPart core_class;
CompositeClassPart composite_class;
ConstraintClassPart constraint_class;
XmManagerClassPart xmManager_class;
XfwfFormattedTextClassPart xfwfFormattedText_class;
XfwfSimpleSGMLClassPart xfwfSimpleSGML_class;
} XfwfSimpleSGMLClassRec;

typedef struct {
/* resources */
String  style;
String  title;
/* private state */
Bool  previous_is_blank;
Bool  start_of_par;
Bool  suppress_indent;
XrmDatabase  styledb;
String  text;
Cardinal  nchars;
Cardinal  nparsed;
FormatInfo  stystack;
int  default_em;
int  default_baseline;
XfwfSSGMLData ** extradata;
int  nrextradata;
int  extradata_allocated;
String  contentbuffer;
} XfwfSimpleSGMLPart;

typedef struct _XfwfSimpleSGMLRec {
CorePart core;
CompositePart composite;
ConstraintPart constraint;
XmManagerPart xmManager;
XfwfFormattedTextPart xfwfFormattedText;
XfwfSimpleSGMLPart xfwfSimpleSGML;
} XfwfSimpleSGMLRec;

externalref XfwfSimpleSGMLClassRec xfwfSimpleSGMLClassRec;

_XFUNCPROTOEND
#endif /* _XfwfSimpleSGMLP_H_ */
